#brute approach
# def binary_search(num,target:int):
#     n=len(num)
#     low=0
#     high=n-1
#     while(low<=high):
#         mid=(low+high) //2
#         if num[mid]==target:
#             return mid
#         elif target>num[mid]:
#             low=mid+1
#         else:
#             high=mid-1
#     return -1
# if __name__ == "__main__":
#     num = [3, 4, 6, 7, 9, 12, 16, 17]
#     target = 12
#     ind = binary_search(num, target)
#     if ind == -1:
#         print("The target is not present.")
#     else:
#         print("The target is at index:", ind)
#optimal approach
def binarySearch(nums: list[int], low: int, high: int, target: int):
    if low > high:
        return -1  # Base case
    
    # Perform the steps:
    mid = (low + high) // 2
    if nums[mid] == target:
        return mid
    elif target > nums[mid]:
        return binarySearch(nums, mid + 1, high, target)
    return binarySearch(nums, low, mid - 1, target)

def search(nums:list[int], target: int):
    return binarySearch(nums, 0, len(nums) - 1, target)
if __name__ == "__main__":
    num = [3, 4, 6, 7, 9, 12, 16, 17]
    target = 3
    ind = search(num, target)
    if ind == -1:
        print("The target is not present.")
    else:
        print("The target is at index:", ind)